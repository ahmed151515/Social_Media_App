
==================================================
File: Core/Interfaces/Repository/IRepository.cs
==================================================
namespace Core.Interfaces.Repository;

public interface IRepository<TEntity>
{
	Task<TEntity?> GetByIdAsync(int id);
	IQueryable<TEntity> GetAll();
	IQueryable<TEntity> GetAllWithIncludes();
	IQueryable<TEntity> Paginate(int page = 1, int pageSize = 20);
	IQueryable<TEntity> PaginateWithIncludes(int page = 1, int pageSize = 20);
	Task AddAsync(TEntity entity);
	void Update(TEntity entity);
	void Delete(TEntity entity);
}


==================================================
File: Data/Repositories/CommentRepository.cs
==================================================
using Core.Interfaces.Repository;
using Core.Models;
using Microsoft.EntityFrameworkCore;

namespace Data.Repositories;

public class CommentRepository(AppDbContext context) : IRepository<Comment>
{
	public IQueryable<Comment> GetAll()
	{
		return context.Comments.AsNoTracking();
	}

	public IQueryable<Comment> GetAllWithIncludes()
	{
		return GetAll()
			.Include(c => c.ParentComment)
			.Include(c => c.Post)
			.Include(c => c.User)
			.Include(c => c.Replies)
			.AsNoTracking();
	}
	public IQueryable<Comment> Paginate(int page = 1, int pageSize = 20)
	{
		if (page <= 0) page = 1;
		if (pageSize <= 0) pageSize = 20;

		return GetAll().Skip((page - 1) * pageSize).Take(pageSize);
	}
	public IQueryable<Comment> PaginateWithIncludes(int page = 1, int pageSize = 20)
	{
		if (page <= 0) page = 1;
		if (pageSize <= 0) pageSize = 20;

		return GetAllWithIncludes().Skip((page - 1) * pageSize).Take(pageSize);
	}
	public async Task<Comment?> GetByIdAsync(int id)
	{
		var comment =
			await context.Comments.SingleOrDefaultAsync(p => p.Id == id);

		return comment;
	}

	public async Task AddAsync(Comment comment)
	{
		ArgumentNullException.ThrowIfNull(comment);

		await context.Comments.AddAsync(comment);
	}

	public void Delete(Comment comment)
	{
		ArgumentNullException.ThrowIfNull(comment);
		context.Comments.Remove(comment);
	}



	public void Update(Comment comment)
	{
		ArgumentNullException.ThrowIfNull(comment);

		context.Comments.Update(comment);
	}
}


==================================================
File: Data/Repositories/CommunityRepository.cs
==================================================
using Core.Interfaces.Repository;
using Core.Models;
using Microsoft.EntityFrameworkCore;

namespace Data.Repositories;

public class CommunityRepository(AppDbContext context) : IRepository<Community>
{
	public IQueryable<Community> GetAll()
	{
		return context.Communities.AsNoTracking();
	}
	public IQueryable<Community> GetAllWithIncludes()
	{
		return GetAll()
			.Include(c => c.Users)
			.Include(c => c.Memberships)
			.Include(c => c.Posts)
			.AsNoTracking();
	}

	public IQueryable<Community> Paginate(int page = 1, int pageSize = 20)
	{
		if (page <= 0) page = 1;
		if (pageSize <= 0) pageSize = 20;

		return GetAll().Skip((page - 1) * pageSize).Take(pageSize);
	}

	public IQueryable<Community> PaginateWithIncludes(int page = 1, int pageSize = 20)
	{
		if (page <= 0) page = 1;
		if (pageSize <= 0) pageSize = 20;

		return GetAllWithIncludes().Skip((page - 1) * pageSize).Take(pageSize);
	}

	public async Task<Community?> GetByIdAsync(int id)
	{
		var community =
			await context.Communities.SingleOrDefaultAsync(p => p.Id == id);

		return community;
	}

	public async Task AddAsync(Community community)
	{
		ArgumentNullException.ThrowIfNull(community);

		await context.Communities.AddAsync(community);
	}

	public void Delete(Community community)
	{
		ArgumentNullException.ThrowIfNull(community);

		context.Communities.Remove(community);
	}

	public void Update(Community community)
	{
		ArgumentNullException.ThrowIfNull(community);

		context.Communities.Update(community);
	}
}


==================================================
File: Data/Repositories/PostRepository.cs
==================================================
using Core.Interfaces.Repository;
using Core.Models;
using Microsoft.EntityFrameworkCore;

namespace Data.Repositories;

public class PostRepository(AppDbContext context) : IRepository<Post>
{

	public IQueryable<Post> GetAll()
	{
		return context.Posts.AsNoTracking();
	}

	public IQueryable<Post> GetAllWithIncludes()
	{
		return GetAll()
			.Include(c => c.Comments)
			.Include(c => c.Community)
			.AsNoTracking();
	}

	public IQueryable<Post> Paginate(int page = 1, int pageSize = 20)
	{
		if (page <= 0) page = 1;
		if (pageSize <= 0) pageSize = 20;

		return GetAll().Skip((page - 1) * pageSize).Take(pageSize);
	}

	public IQueryable<Post> PaginateWithIncludes(int page = 1, int pageSize = 20)
	{
		if (page <= 0) page = 1;
		if (pageSize <= 0) pageSize = 20;

		return GetAllWithIncludes().Skip((page - 1) * pageSize).Take(pageSize);
	}

	public async Task<Post?> GetByIdAsync(int id)
	{
		var post = await context.Posts.SingleOrDefaultAsync(p => p.Id == id);

		return post;
	}

	public async Task AddAsync(Post post)
	{
		ArgumentNullException.ThrowIfNull(post);

		await context.Posts.AddAsync(post);
	}

	public void Delete(Post post)
	{
		ArgumentNullException.ThrowIfNull(post);

		context.Posts.Remove(post);
	}

	public void Update(Post post)
	{
		ArgumentNullException.ThrowIfNull(post);

		context.Posts.Update(post);
	}


}


==================================================
File: Web/Program.cs
==================================================
using Core.Interfaces;
using Core.Interfaces.Repository;
using Core.Interfaces.Services;
using Core.Models;
using Data;
using Data.Interceptors;
using Data.Repositories;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Services;

namespace Web;

public class Program
{
	public static void Main(string[] args)
	{
		var builder = WebApplication.CreateBuilder(args);

		// Add services to the container.
		builder.Services.AddControllersWithViews();

		builder.Services.AddDbContext<AppDbContext>(conf =>
			conf.UseSqlServer(
				builder.Configuration.GetConnectionString("dev"))
			.AddInterceptors(new SoftDeleteInterceptor())
			);

		builder.Services.AddIdentity<ApplicationUser, IdentityRole>(o =>
			{
				o.Password.RequireDigit = true;
				o.Password.RequireNonAlphanumeric = false;
				o.Password.RequireUppercase = false;

				o.User.RequireUniqueEmail = true;
			})
			.AddEntityFrameworkStores<AppDbContext>();

		builder.Services.AddScoped<IRepository<Post>, PostRepository>();
		builder.Services.AddScoped<IRepository<Comment>, CommentRepository>();

		builder.Services.AddScoped<IRepository<Community>, CommunityRepository>();
		builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();

		builder.Services.AddScoped<IService<Comment>, CommentService>();
		builder.Services.AddScoped<IService<Post>, PostService>();
		builder.Services.AddScoped<IService<Community>, CommunityService>();


		var app = builder.Build();

		// Configure the HTTP request pipeline.
		if (!app.Environment.IsDevelopment())
		{
			app.UseExceptionHandler("/Home/Error");
			// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
			// app.UseHsts();
		}

		app.UseHttpsRedirection();
		app.UseStaticFiles();

		app.UseRouting();

		app.UseAuthentication();
		app.UseAuthorization();

		app.MapControllerRoute(
			"default",
			"{controller=Home}/{action=Index}/{id?}");

		app.Run();
	}
}


==================================================
File: Core/Interfaces/Services/IService.cs
==================================================
using System.Linq.Expressions;

namespace Core.Interfaces.Services;

public interface IService<TEntity>
{
	Task<IEnumerable<TEntity>> GetAllAsync();
	Task<IEnumerable<TEntity>> GetAllWithIncludesAsync();
	Task<IEnumerable<TEntity>> PaginateAsync(int page = 1, int pageSize = 20);
	Task<IEnumerable<TEntity>> PaginateWithIncludeAsync(int page = 1, int pageSize = 20);

	Task<TEntity?> GetByIdAsync(int id);
	Task<TEntity?> GetByIdWithIncludeAsync(int id);

	Task<IEnumerable<TEntity>> FindAsync(Expression<Func<TEntity, bool>> predicate);
	Task<IEnumerable<TEntity>> FindWithIncludeAsync(Expression<Func<TEntity, bool>> predicate);


	Task CreateAsync(TEntity newEntity);
	Task UpdateAsync(int id, TEntity postToUpdate);
	Task DeleteAsync(int id);
}


==================================================
File: Services/CommentService.cs
==================================================
using Core.Interfaces;
using Core.Interfaces.Services;
using Core.Models;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;

namespace Services;

public class CommentService(IUnitOfWork unitOfWork) : IService<Comment>
{
	public async Task<IEnumerable<Comment>> GetAllAsync()
	{
		return await unitOfWork.CommentRepository.GetAll()
			.ToListAsync();
	}

	public async Task<IEnumerable<Comment>> GetAllWithIncludesAsync()
	{
		return await unitOfWork.CommentRepository.GetAllWithIncludes().ToListAsync();
	}

	public async Task<IEnumerable<Comment>> PaginateAsync(int page = 1, int pageSize = 20)
	{
		// the check of page and pagesize is in Repository

		return await unitOfWork.CommentRepository.Paginate(page, pageSize).ToListAsync();
	}

	public async Task<IEnumerable<Comment>> PaginateWithIncludeAsync(int page = 1, int pageSize = 20)
	{
		return await unitOfWork.CommentRepository.PaginateWithIncludes(page, pageSize).ToListAsync();
	}

	public async Task<Comment?> GetByIdAsync(int id)
	{
		return await unitOfWork.CommentRepository.GetByIdAsync(id);
	}

	public async Task<Comment?> GetByIdWithIncludeAsync(int id)
	{
		return await unitOfWork.CommentRepository.GetAllWithIncludes()
			.SingleOrDefaultAsync(c => c.Id == id);
	}

	public async Task<IEnumerable<Comment>> FindAsync(
		Expression<Func<Comment, bool>> predicate)
	{
		return await unitOfWork.CommentRepository.GetAll().Where(predicate)
			.ToListAsync();
	}
	public async Task<IEnumerable<Comment>> FindWithIncludeAsync(
		Expression<Func<Comment, bool>> predicate)
	{
		return await unitOfWork.CommentRepository.GetAllWithIncludes().Where(predicate)
			.ToListAsync();
	}


	public async Task CreateAsync(Comment newComment)
	{
		await unitOfWork.CommentRepository.AddAsync(newComment);

		await unitOfWork.SaveChangeAsync();
	}

	public async Task UpdateAsync(int id, Comment commentToUpdate)
	{
		ArgumentNullException.ThrowIfNull(commentToUpdate);

		var oldComment = await unitOfWork.CommentRepository.GetByIdAsync(id);

		if (oldComment is null)
		{
			throw new ArgumentException("Id not found");
		}

		oldComment.Content = commentToUpdate.Content;


		await unitOfWork.SaveChangeAsync();
	}

	public async Task DeleteAsync(int id)
	{
		var comment = await unitOfWork.CommentRepository.GetByIdAsync(id);

		if (comment is null)
		{
			throw new ArgumentException("Id not found");
		}


		unitOfWork.CommentRepository.Delete(comment);

		await unitOfWork.SaveChangeAsync();
	}
}


==================================================
File: Services/CommunityService.cs
==================================================
using Core.Interfaces;
using Core.Interfaces.Services;
using Core.Models;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;

namespace Services;

public class CommunityService(IUnitOfWork unitOfWork) : IService<Community>
{



	public async Task<IEnumerable<Community>> GetAllAsync()
	{
		return await unitOfWork.CommunityRepository.GetAll()
			.ToListAsync();
	}

	public async Task<IEnumerable<Community>> GetAllWithIncludesAsync()
	{
		return await unitOfWork.CommunityRepository.GetAllWithIncludes().ToListAsync();
	}

	public async Task<IEnumerable<Community>> PaginateAsync(int page = 1, int pageSize = 20)
	{
		// the check of page and pagesize is in Repository

		return await unitOfWork.CommunityRepository.Paginate(page, pageSize).ToListAsync();
	}

	public async Task<IEnumerable<Community>> PaginateWithIncludeAsync(int page = 1, int pageSize = 20)
	{
		return await unitOfWork.CommunityRepository.PaginateWithIncludes(page, pageSize).ToListAsync();
	}

	public async Task<Community?> GetByIdAsync(int id)
	{
		return await unitOfWork.CommunityRepository.GetByIdAsync(id);
	}

	public async Task<Community?> GetByIdWithIncludeAsync(int id)
	{
		return await unitOfWork.CommunityRepository.GetAllWithIncludes()
			.SingleOrDefaultAsync(c => c.Id == id);
	}

	public async Task<IEnumerable<Community>> FindAsync(
		Expression<Func<Community, bool>> predicate)
	{
		return await unitOfWork.CommunityRepository.GetAll().Where(predicate)
			.ToListAsync();
	}
	public async Task<IEnumerable<Community>> FindWithIncludeAsync(
		Expression<Func<Community, bool>> predicate)
	{
		return await unitOfWork.CommunityRepository.GetAllWithIncludes().Where(predicate)
			.ToListAsync();
	}


	public async Task CreateAsync(Community newCommunity)
	{
		await unitOfWork.CommunityRepository.AddAsync(newCommunity);

		await unitOfWork.SaveChangeAsync();
	}

	public async Task UpdateAsync(int id, Community communityToUpdate)
	{
		ArgumentNullException.ThrowIfNull(communityToUpdate);

		var oldCommunity = await unitOfWork.CommunityRepository.GetByIdAsync(id);

		if (oldCommunity is null)
		{
			throw new ArgumentException("Id not found");
		}

		oldCommunity.Name = communityToUpdate.Name;
		oldCommunity.Description = communityToUpdate.Description;

		await unitOfWork.SaveChangeAsync();
	}

	public async Task DeleteAsync(int id)
	{
		var community = await unitOfWork.CommunityRepository.GetByIdAsync(id);

		if (community is null)
		{
			throw new ArgumentException("Id not found");
		}

		unitOfWork.CommunityRepository.Delete(community);

		await unitOfWork.SaveChangeAsync();
	}
}


==================================================
File: Services/PostService.cs
==================================================
using Core.Interfaces;
using Core.Interfaces.Services;
using Core.Models;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;

namespace Services;

public class PostService(IUnitOfWork unitOfWork) : IService<Post>
{
	public async Task<IEnumerable<Post>> GetAllAsync()
	{
		return await unitOfWork.PostRepository.GetAll()
			.ToListAsync();
	}

	public async Task<IEnumerable<Post>> GetAllWithIncludesAsync()
	{
		return await unitOfWork.PostRepository.GetAllWithIncludes().ToListAsync();
	}

	public async Task<IEnumerable<Post>> PaginateAsync(int page = 1, int pageSize = 20)
	{
		// the check of page and pagesize is in Repository

		return await unitOfWork.PostRepository.Paginate(page, pageSize).ToListAsync();
	}

	public async Task<IEnumerable<Post>> PaginateWithIncludeAsync(int page = 1, int pageSize = 20)
	{
		return await unitOfWork.PostRepository.PaginateWithIncludes(page, pageSize).ToListAsync();
	}

	public async Task<Post?> GetByIdAsync(int id)
	{
		return await unitOfWork.PostRepository.GetByIdAsync(id);
	}

	public async Task<Post?> GetByIdWithIncludeAsync(int id)
	{
		return await unitOfWork.PostRepository.GetAllWithIncludes()
			.SingleOrDefaultAsync(c => c.Id == id);
	}

	public async Task<IEnumerable<Post>> FindAsync(
		Expression<Func<Post, bool>> predicate)
	{
		return await unitOfWork.PostRepository.GetAll().Where(predicate)
			.ToListAsync();
	}
	public async Task<IEnumerable<Post>> FindWithIncludeAsync(
		Expression<Func<Post, bool>> predicate)
	{
		return await unitOfWork.PostRepository.GetAllWithIncludes().Where(predicate)
			.ToListAsync();
	}


	public async Task CreateAsync(Post newPost)
	{
		await unitOfWork.PostRepository.AddAsync(newPost);

		await unitOfWork.SaveChangeAsync();


	}

	public async Task UpdateAsync(int id, Post postToUpdate)
	{
		ArgumentNullException.ThrowIfNull(postToUpdate);

		var oldPost = await unitOfWork.PostRepository.GetByIdAsync(id);

		if (oldPost is null)
		{
			throw new ArgumentException("Id not found");
		}

		oldPost.Title = postToUpdate.Title;
		oldPost.Content = postToUpdate.Content;

		await unitOfWork.SaveChangeAsync();
	}

	public async Task DeleteAsync(int id)
	{
		var post = await unitOfWork.PostRepository.GetByIdAsync(id);

		if (post is null)
		{
			throw new ArgumentException("Id not found");
		}

		unitOfWork.PostRepository.Delete(post);

		await unitOfWork.SaveChangeAsync();
	}


}


